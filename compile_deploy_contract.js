// run this two commands below before running this code to  connect the JS interactive 
//console to the geth instance running in the other window

// command: geth --dev --mine
//command: geth attach ipc:\\.\pipe\geth.ipc

var proofContract = web3.eth.contract([{"constant":true,"inputs":[{"name":"fileHash","type":"string"}],"name":"get","outputs":[{"name":"timestamp","type":"uint256"},{"name":"owner","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"owner","type":"string"},{"name":"fileHash","type":"string"}],"name":"set","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"anonymous":false,"inputs":[{"indexed":false,"name":"status","type":"bool"},{"indexed":false,"name":"timestamp","type":"uint256"},{"indexed":false,"name":"owner","type":"string"},{"indexed":false,"name":"fileHash","type":"string"}],"name":"logFileAddedStatus","type":"event"}]);
var proof = proofContract.new(
   {
     from: web3.eth.accounts[0], 
     data: '0x608060405234801561001057600080fd5b506108ac806100206000396000f3fe608060405260043610610046576000357c010000000000000000000000000000000000000000000000000000000090048063693ec85e1461004b578063e942b51614610193575b600080fd5b34801561005757600080fd5b506101116004803603602081101561006e57600080fd5b810190808035906020019064010000000081111561008b57600080fd5b82018360208201111561009d57600080fd5b803590602001918460018302840111640100000000831117156100bf57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192905050506102f2565b6040518083815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561015757808201518184015260208101905061013c565b50505050905090810190601f1680156101845780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b34801561019f57600080fd5b506102f0600480360360408110156101b657600080fd5b81019080803590602001906401000000008111156101d357600080fd5b8201836020820111156101e557600080fd5b8035906020019184600183028401116401000000008311171561020757600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561026a57600080fd5b82018360208201111561027c57600080fd5b8035906020019184600183028401116401000000008311171561029e57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610475565b005b600060606000836040518082805190602001908083835b60208310151561032e5780518252602082019150602081019050602083039250610309565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206000015491506000836040518082805190602001908083835b60208310151561039f578051825260208201915060208101905060208303925061037a565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206001018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104695780601f1061043e57610100808354040283529160200191610469565b820191906000526020600020905b81548152906001019060200180831161044c57829003601f168201915b50505050509050915091565b600080826040518082805190602001908083835b6020831015156104ae5780518252602082019150602081019050602083039250610489565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206000015414156106b8576040805190810160405280428152602001838152506000826040518082805190602001908083835b6020831015156105385780518252602082019150602081019050602083039250610513565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206000820151816000015560208201518160010190805190602001906105919291906107db565b509050507f0d3bbc3c02da6ed436712ca1a0f626f1269df703a105f034e4637c7b10fb7ba5600142848460405180851515151581526020018481526020018060200180602001838103835285818151815260200191508051906020019080838360005b8381101561060f5780820151818401526020810190506105f4565b50505050905090810190601f16801561063c5780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b8381101561067557808201518184015260208101905061065a565b50505050905090810190601f1680156106a25780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390a16107d7565b7f0d3bbc3c02da6ed436712ca1a0f626f1269df703a105f034e4637c7b10fb7ba5600042848460405180851515151581526020018481526020018060200180602001838103835285818151815260200191508051906020019080838360005b83811015610732578082015181840152602081019050610717565b50505050905090810190601f16801561075f5780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b8381101561079857808201518184015260208101905061077d565b50505050905090810190601f1680156107c55780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390a15b5050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061081c57805160ff191683800117855561084a565b8280016001018555821561084a579182015b8281111561084957825182559160200191906001019061082e565b5b509050610857919061085b565b5090565b61087d91905b80821115610879576000816000905550600101610861565b5090565b9056fea165627a7a723058200b19232e588fc9ebd2f05618801514699527ff3dde7cea8c3a1d86837c31b3f60029', 
     gas: '4700000'
   }, function (e, contract){
    console.log(e, contract);
    if (typeof contract.address !== 'undefined') {
         console.log('Contract mined! address: ' + contract.address + ' transactionHash: ' + contract.transactionHash);
    }
 })
 
 //  Now press Enter. You will first get the transaction hash, and 
 //after waiting for some time, you will get the contract address 
 //after the transaction is mined. The transaction hash is the hash of the transaction, 
 //which is unique for every transaction. Every deployed contract 
 //has a unique contract address to identity the contract in the blockchain. 

 // Then Now let's store the file details and retrieve them. Place this code to broadcast 
 //a transaction to store a file's details:
var contract_obj = proofContract.at("0x9220c8ec6489a4298b06c2183cf04fb7e8fbd6d4"); 
contract_obj.set.sendTransaction("Owner Name", "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855", { from: web3.eth.accounts[0], }, function(error, transactionHash){  if (!err)    console.log(transactionHash); })

// Now let's find the file's details. Run this code in order to find the file's details:
contract_obj.get.call("e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495 991b7852b855"); 
// You will get this output:
// [1477591434, "Owner Name"] 
//The call method is used to call a contract's method on EVM with the current state. 
//It doesn't broadcast a transaction. To read data, we don't need to broadcast because 
//we will have our own copy of the blockchain.  